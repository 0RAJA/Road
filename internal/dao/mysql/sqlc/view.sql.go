// Code generated by sqlc. DO NOT EDIT.
// source: view.sql

package db

import (
	"context"
	"time"
)

const createView = `-- name: CreateView :exec
INSERT INTO views (views_num)
VALUES (?)
`

func (q *Queries) CreateView(ctx context.Context, viewsNum int64) error {
	_, err := q.db.ExecContext(ctx, createView, viewsNum)
	return err
}

const listViewByCreateTime = `-- name: ListViewByCreateTime :many
SELECT id, views_num, create_time
FROM views
where create_time between ? and ?
ORDER BY create_time Desc
LIMIT ?,?
`

type ListViewByCreateTimeParams struct {
	CreateTime   time.Time `json:"create_time"`
	CreateTime_2 time.Time `json:"create_time_2"`
	Offset       int32     `json:"offset"`
	Limit        int32     `json:"limit"`
}

func (q *Queries) ListViewByCreateTime(ctx context.Context, arg ListViewByCreateTimeParams) ([]View, error) {
	rows, err := q.db.QueryContext(ctx, listViewByCreateTime,
		arg.CreateTime,
		arg.CreateTime_2,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []View{}
	for rows.Next() {
		var i View
		if err := rows.Scan(&i.ID, &i.ViewsNum, &i.CreateTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
