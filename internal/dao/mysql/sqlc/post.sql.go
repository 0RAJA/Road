// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO post (id, cover, title, abstract, content, public)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreatePostParams struct {
	ID       int64  `json:"id"`
	Cover    string `json:"cover"`
	Title    string `json:"title"`
	Abstract string `json:"abstract"`
	Content  string `json:"content"`
	Public   bool   `json:"public"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Cover,
		arg.Title,
		arg.Abstract,
		arg.Content,
		arg.Public,
	)
	return err
}

const deletePostByPostID = `-- name: DeletePostByPostID :exec
DELETE
FROM post
WHERE id = ?
  and deleted = true
`

func (q *Queries) DeletePostByPostID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePostByPostID, id)
	return err
}

const getPostByPostID = `-- name: GetPostByPostID :one
SELECT id, cover, title, abstract, content, public, deleted, star_num, visited_num, create_time, modify_time
FROM post
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetPostByPostID(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByPostID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Cover,
		&i.Title,
		&i.Abstract,
		&i.Content,
		&i.Public,
		&i.Deleted,
		&i.StarNum,
		&i.VisitedNum,
		&i.CreateTime,
		&i.ModifyTime,
	)
	return i, err
}

const listPostBySearchKey = `-- name: ListPostBySearchKey :many
SELECT p.id,
       cover,
       title,
       abstract,
       star_num,
       visited_num,
       p.create_time,
       modify_time
FROM post p
where (title like ?
    or abstract like ?)
  and deleted = false
ORDER BY create_time Desc
LIMIT ?,?
`

type ListPostBySearchKeyParams struct {
	Title    string `json:"title"`
	Abstract string `json:"abstract"`
	Offset   int32  `json:"offset"`
	Limit    int32  `json:"limit"`
}

type ListPostBySearchKeyRow struct {
	ID         int64     `json:"id"`
	Cover      string    `json:"cover"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	StarNum    int32     `json:"star_num"`
	VisitedNum int32     `json:"visited_num"`
	CreateTime time.Time `json:"create_time"`
	ModifyTime time.Time `json:"modify_time"`
}

func (q *Queries) ListPostBySearchKey(ctx context.Context, arg ListPostBySearchKeyParams) ([]ListPostBySearchKeyRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostBySearchKey,
		arg.Title,
		arg.Abstract,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostBySearchKeyRow{}
	for rows.Next() {
		var i ListPostBySearchKeyRow
		if err := rows.Scan(
			&i.ID,
			&i.Cover,
			&i.Title,
			&i.Abstract,
			&i.StarNum,
			&i.VisitedNum,
			&i.CreateTime,
			&i.ModifyTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostByStartTime = `-- name: ListPostByStartTime :many
SELECT p.id,
       cover,
       title,
       abstract,
       star_num,
       visited_num,
       p.create_time,
       modify_time
FROM post p
where deleted = false
  and p.create_time between ? and ?
ORDER BY create_time Desc
LIMIT ?,?
`

type ListPostByStartTimeParams struct {
	CreateTime   time.Time `json:"create_time"`
	CreateTime_2 time.Time `json:"create_time_2"`
	Offset       int32     `json:"offset"`
	Limit        int32     `json:"limit"`
}

type ListPostByStartTimeRow struct {
	ID         int64     `json:"id"`
	Cover      string    `json:"cover"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	StarNum    int32     `json:"star_num"`
	VisitedNum int32     `json:"visited_num"`
	CreateTime time.Time `json:"create_time"`
	ModifyTime time.Time `json:"modify_time"`
}

func (q *Queries) ListPostByStartTime(ctx context.Context, arg ListPostByStartTimeParams) ([]ListPostByStartTimeRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostByStartTime,
		arg.CreateTime,
		arg.CreateTime_2,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostByStartTimeRow{}
	for rows.Next() {
		var i ListPostByStartTimeRow
		if err := rows.Scan(
			&i.ID,
			&i.Cover,
			&i.Title,
			&i.Abstract,
			&i.StarNum,
			&i.VisitedNum,
			&i.CreateTime,
			&i.ModifyTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostDeleted = `-- name: ListPostDeleted :many
SELECT id,
       cover,
       title,
       abstract,
       star_num,
       visited_num,
       create_time,
       modify_time
FROM post
where deleted = true
ORDER BY create_time Desc
LIMIT ?,?
`

type ListPostDeletedParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListPostDeletedRow struct {
	ID         int64     `json:"id"`
	Cover      string    `json:"cover"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	StarNum    int32     `json:"star_num"`
	VisitedNum int32     `json:"visited_num"`
	CreateTime time.Time `json:"create_time"`
	ModifyTime time.Time `json:"modify_time"`
}

func (q *Queries) ListPostDeleted(ctx context.Context, arg ListPostDeletedParams) ([]ListPostDeletedRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostDeleted, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostDeletedRow{}
	for rows.Next() {
		var i ListPostDeletedRow
		if err := rows.Scan(
			&i.ID,
			&i.Cover,
			&i.Title,
			&i.Abstract,
			&i.StarNum,
			&i.VisitedNum,
			&i.CreateTime,
			&i.ModifyTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostPrivate = `-- name: ListPostPrivate :many
SELECT id,
       cover,
       title,
       abstract,
       star_num,
       visited_num,
       create_time,
       modify_time
FROM post
where public = false
  and deleted = false
ORDER BY create_time Desc
LIMIT ?,?
`

type ListPostPrivateParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListPostPrivateRow struct {
	ID         int64     `json:"id"`
	Cover      string    `json:"cover"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	StarNum    int32     `json:"star_num"`
	VisitedNum int32     `json:"visited_num"`
	CreateTime time.Time `json:"create_time"`
	ModifyTime time.Time `json:"modify_time"`
}

func (q *Queries) ListPostPrivate(ctx context.Context, arg ListPostPrivateParams) ([]ListPostPrivateRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostPrivate, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostPrivateRow{}
	for rows.Next() {
		var i ListPostPrivateRow
		if err := rows.Scan(
			&i.ID,
			&i.Cover,
			&i.Title,
			&i.Abstract,
			&i.StarNum,
			&i.VisitedNum,
			&i.CreateTime,
			&i.ModifyTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostPublic = `-- name: ListPostPublic :many
SELECT id,
       cover,
       title,
       abstract,
       star_num,
       visited_num,
       create_time,
       modify_time
FROM post
where public = true
  and deleted = false
ORDER BY create_time Desc
LIMIT ?,?
`

type ListPostPublicParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListPostPublicRow struct {
	ID         int64     `json:"id"`
	Cover      string    `json:"cover"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	StarNum    int32     `json:"star_num"`
	VisitedNum int32     `json:"visited_num"`
	CreateTime time.Time `json:"create_time"`
	ModifyTime time.Time `json:"modify_time"`
}

func (q *Queries) ListPostPublic(ctx context.Context, arg ListPostPublicParams) ([]ListPostPublicRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostPublic, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostPublicRow{}
	for rows.Next() {
		var i ListPostPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Cover,
			&i.Title,
			&i.Abstract,
			&i.StarNum,
			&i.VisitedNum,
			&i.CreateTime,
			&i.ModifyTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostTopping = `-- name: ListPostTopping :many
SELECT p.id,
       cover,
       title,
       abstract,
       star_num,
       visited_num,
       p.create_time,
       modify_time,
       t.id
FROM post p,
     tops t
where p.id = t.post_id
ORDER BY t.id
LIMIT ?,?
`

type ListPostToppingParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListPostToppingRow struct {
	ID         int64     `json:"id"`
	Cover      string    `json:"cover"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	StarNum    int32     `json:"star_num"`
	VisitedNum int32     `json:"visited_num"`
	CreateTime time.Time `json:"create_time"`
	ModifyTime time.Time `json:"modify_time"`
	ID_2       int64     `json:"id_2"`
}

func (q *Queries) ListPostTopping(ctx context.Context, arg ListPostToppingParams) ([]ListPostToppingRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostTopping, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostToppingRow{}
	for rows.Next() {
		var i ListPostToppingRow
		if err := rows.Scan(
			&i.ID,
			&i.Cover,
			&i.Title,
			&i.Abstract,
			&i.StarNum,
			&i.VisitedNum,
			&i.CreateTime,
			&i.ModifyTime,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const modifyPostDeletedByID = `-- name: ModifyPostDeletedByID :exec
UPDATE post
SET deleted = ?
WHERE id = ?
`

type ModifyPostDeletedByIDParams struct {
	Deleted bool  `json:"deleted"`
	ID      int64 `json:"id"`
}

func (q *Queries) ModifyPostDeletedByID(ctx context.Context, arg ModifyPostDeletedByIDParams) error {
	_, err := q.db.ExecContext(ctx, modifyPostDeletedByID, arg.Deleted, arg.ID)
	return err
}

const modifyPostPublicByID = `-- name: ModifyPostPublicByID :exec
UPDATE post
SET public = ?
WHERE id = ?
`

type ModifyPostPublicByIDParams struct {
	Public bool  `json:"public"`
	ID     int64 `json:"id"`
}

func (q *Queries) ModifyPostPublicByID(ctx context.Context, arg ModifyPostPublicByIDParams) error {
	_, err := q.db.ExecContext(ctx, modifyPostPublicByID, arg.Public, arg.ID)
	return err
}

const updatePostByPostID = `-- name: UpdatePostByPostID :exec
UPDATE post
SET cover    = ?,
    title    = ?,
    abstract = ?,
    content  = ?,
    public   = ?
WHERE id = ?
`

type UpdatePostByPostIDParams struct {
	Cover    string `json:"cover"`
	Title    string `json:"title"`
	Abstract string `json:"abstract"`
	Content  string `json:"content"`
	Public   bool   `json:"public"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdatePostByPostID(ctx context.Context, arg UpdatePostByPostIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePostByPostID,
		arg.Cover,
		arg.Title,
		arg.Abstract,
		arg.Content,
		arg.Public,
		arg.ID,
	)
	return err
}
