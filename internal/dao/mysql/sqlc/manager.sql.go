// Code generated by sqlc. DO NOT EDIT.
// source: manager.sql

package db

import (
	"context"
)

const createManager = `-- name: CreateManager :exec
INSERT INTO manager (username, password, avatar_url)
VALUES (?, ?, ?)
`

type CreateManagerParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) CreateManager(ctx context.Context, arg CreateManagerParams) error {
	_, err := q.db.ExecContext(ctx, createManager, arg.Username, arg.Password, arg.AvatarUrl)
	return err
}

const deleteManager = `-- name: DeleteManager :exec
DELETE
FROM manager
WHERE username = ?
`

func (q *Queries) DeleteManager(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteManager, username)
	return err
}

const getManagerByUsername = `-- name: GetManagerByUsername :one
SELECT username, password, avatar_url
FROM manager
WHERE username = ?
LIMIT 1
`

func (q *Queries) GetManagerByUsername(ctx context.Context, username string) (Manager, error) {
	row := q.db.QueryRowContext(ctx, getManagerByUsername, username)
	var i Manager
	err := row.Scan(&i.Username, &i.Password, &i.AvatarUrl)
	return i, err
}

const listManager = `-- name: ListManager :many
SELECT username, avatar_url
FROM manager
ORDER BY username
LIMIT ?,?
`

type ListManagerParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListManagerRow struct {
	Username  string `json:"username"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) ListManager(ctx context.Context, arg ListManagerParams) ([]ListManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, listManager, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListManagerRow{}
	for rows.Next() {
		var i ListManagerRow
		if err := rows.Scan(&i.Username, &i.AvatarUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateManagerAvatar = `-- name: UpdateManagerAvatar :exec
UPDATE manager
SET avatar_url =?
WHERE username = ?
`

type UpdateManagerAvatarParams struct {
	AvatarUrl string `json:"avatar_url"`
	Username  string `json:"username"`
}

func (q *Queries) UpdateManagerAvatar(ctx context.Context, arg UpdateManagerAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateManagerAvatar, arg.AvatarUrl, arg.Username)
	return err
}

const updateManagerPassword = `-- name: UpdateManagerPassword :exec
UPDATE manager
SET password =?
WHERE username = ?
`

type UpdateManagerPasswordParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) UpdateManagerPassword(ctx context.Context, arg UpdateManagerPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateManagerPassword, arg.Password, arg.Username)
	return err
}
